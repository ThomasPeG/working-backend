generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  password            String?
  name                String?
  profilePhoto        String?
  gender              String?
  birthDate           DateTime?
  useGPS              Boolean?     @default(false)
  userType            String       @default("employee")
  userMembershipPlan  String       @default("FREE") // FREE, PREMIUM, VIP
  rating              Float?       @default(0)
  totalRatings        Int?         @default(0)
  phoneNumber         String?
  interests           String[]     @default([])
  
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  
  isPrivate           Boolean?     @default(false)
  available           Boolean?     @default(true)
  isActive            Boolean?     @default(true)
  
  birthplace          Json?        // { city: string, country: string }
  residenceLocation   Json?        // { city: string, country: string }
  location            Json?
  
  termsAcceptedAt     DateTime?
  termsAccepted       Boolean?     @default(false)

  // Relaciones
  employeeProfile     Employee?    @relation("employeeProfile")    
  
  // Relaciones de amistad
  sentFriendRequests     Friendship[] @relation("FriendshipRequester")
  receivedFriendRequests Friendship[] @relation("FriendshipAddressee")
  
  // Relaciones de calificaciones
  givenRatings        Rating[]     @relation("RatingGiver")
  receivedRatings     Rating[]     @relation("RatingReceiver")
  
  // Relaciones de contratos
  userContracts       UserContract[]
}

model Employee {
  id              String       @id @default(uuid())
  userId          String       @unique
  cv              String?
  jobInterests    String[]     @default([])
  skills          String?
  spokenLanguages String[]     @default([])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  education       Education[]
  experiences     Experience[]
  user            User         @relation("employeeProfile", fields: [userId], references: [id])
}

model Experience {
  id               String    @id @default(uuid())
  employeeId       String
  position         String
  company          String?
  description      String?
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  employee         Employee  @relation(fields: [employeeId], references: [id])
}

model Education {
  id                String    @id @default(uuid())
  employeeId        String
  educationType     String?
  institution       String?
  fieldOfStudy      String?
  timeStudying      Int?
  startDate         DateTime
  endDate           DateTime?
  currentlyStudying Boolean?  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  employee          Employee  @relation(fields: [employeeId], references: [id])
}

model Friendship {
  id            String    @id @default(uuid())
  requesterId   String
  addresseeId   String
  status        String    @default("pending") // pending, accepted, rejected
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  requester     User      @relation("FriendshipRequester", fields: [requesterId], references: [id])
  addressee     User      @relation("FriendshipAddressee", fields: [addresseeId], references: [id])
  
  @@unique([requesterId, addresseeId])
}

model Rating {
  id          String    @id @default(uuid())
  giverId     String
  receiverId  String
  rating      Float     // 1-5 stars
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  giver       User      @relation("RatingGiver", fields: [giverId], references: [id])
  receiver    User      @relation("RatingReceiver", fields: [receiverId], references: [id])
  
  @@unique([giverId, receiverId])
}

model Contract {
  id              String    @id @default(uuid())
  title           String
  description     String?
  type            String    // full-time, part-time, freelance, internship, temporary
  status          String    @default("draft") // draft, active, completed, cancelled, suspended
  companyName     String?
  department      String?
  startDate       DateTime?
  endDate         DateTime?
  baseSalary      Float?
  salaryFrequency String?   // hourly, daily, weekly, monthly, yearly
  benefits        String?
  terms           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userContracts   UserContract[]
}

model UserContract {
  id               String    @id @default(uuid())
  userId           String
  contractId       String
  role             String    // employee, contractor, manager, supervisor, client
  individualSalary Float?
  salaryFrequency  String?
  startDate        DateTime?
  endDate          DateTime?
  isActive         Boolean   @default(true)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  user             User      @relation(fields: [userId], references: [id])
  contract         Contract  @relation(fields: [contractId], references: [id])
  
  @@unique([userId, contractId])
}
